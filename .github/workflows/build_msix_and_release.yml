name: Build Msix

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]
        platform: [x64]

    runs-on: windows-latest

    env:
      Solution_Name: Polymerium.Sln

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.POLYMERIUM_APP_TEMPORARYKEY }}")
        $certificatePath = "GitHubActionsWorkflow.pfx"
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    - name: Create the app package
      run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration /p:Platform=$env:Platform /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true
      env:
        Appx_Bundle: Never
        Appx_Package_Build_Mode: SideloadOnly
        Appx_Package_Dir: Packages\
        Configuration: ${{ matrix.configuration }}
        Platform: ${{ matrix.platform }}
        
    - name: Remove the pfx
      run: Remove-Item -path GitHubActionsWorkflow.pfx

    - uses: ncipollo/release-action@v1
      with:
        artifacts: "${{ env.Solution_Name }}\\Packages\\*.cer,${{ env.Solution_Name }}\\Packages\\*.msix"
        bodyFile: "body.md"
        prerelease: true
        generateReleaseNotes: true
